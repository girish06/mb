<?php

use Drupal\block\Entity\Block;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\Ajax\OpenModalDialogCommand;
use Drupal\Core\Ajax\CloseModalDialogCommand;
use Drupal\Core\Ajax\RedirectCommand;
use Drupal\Core\Url;
use Drupal\user\Entity\User;
use Apigee\Edge\Api\Management\Controller\DeveloperAppCredentialController;

/**
 * @file
 * Functions to support theming in the open_banking_portal theme.
 */

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function seacoastbank_preprocess_html(array &$variables) {
  /* Add class to html tag */
  //$variables['html_attributes']->addClass('no-js');

  // Don't display the site name twice on the front page (and potentially others)
  /*if (isset($variables['head_title_array']['title']) && isset($variables['head_title_array']['name']) && ($variables['head_title_array']['title'] == $variables['head_title_array']['name'])) {
    $variables['head_title'] = $variables['head_title_array']['name'];
  }*/
}

/**
 * Implements hook_page_attachments_alter().
 */
function seacoastbank_page_attachments_alter(array &$page) {
  // Tell IE to use latest rendering engine (not to use compatibility mode).
  /*$ie_edge = [
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => [
    'http-equiv' => 'X-UA-Compatible',
    'content' => 'IE=edge',
    ],
  ];
  $page['#attached']['html_head'][] = [$ie_edge, 'ie_edge'];*/
}

/**
 * Implements hook_preprocess_page() for page.html.twig.
 */
function seacoastbank_preprocess_page(array &$variables) {


}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function seacoastbank_theme_suggestions_page_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_theme_suggestions_node_alter().
 */
function oseacoastbank_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  /*$node = $variables['elements']['#node'];

  if ($variables['elements']['#view_mode'] == "full") {

  }*/
}

/**
 * Implements hook_preprocess_HOOK() for Block document templates.
 */
function seacoastbank_preprocess_block(array &$variables) {

}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function seacoastbank_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  /*$element = $variables['element'];
  $suggestions[] = 'field__' . $element['#view_mode'];
  $suggestions[] = 'field__' . $element['#view_mode'] . '__' . $element['#field_name'];*/
}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function seacoastbank_theme_suggestions_fieldset_alter(array &$suggestions, array $variables) {
  /*$element = $variables['element'];
  if (isset($element['#attributes']['class']) && in_array('form-composite', $element['#attributes']['class'])) {
    $suggestions[] = 'fieldset__form_composite';
  }*/
}

/**
 * Implements hook_preprocess_node().
 */
function seacoastbank_preprocess_node(array &$variables) {
  // Default to turning off byline/submitted.
  //$variables['display_submitted'] = FALSE;
}

/**
 * Implements hook_theme_suggestions_views_view_alter().
 */
function seacoastbank_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_form().
 */
function seacoastbank_preprocess_form(array &$variables) {
  //$variables['attributes']['novalidate'] = 'novalidate';

}

/**
 * Implements hook_preprocess_select().
 */
function seacoastbank_preprocess_select(array &$variables) {
  //$variables['attributes']['class'][] = 'select-chosen';
}

/**
 * Implements hook_preprocess_field().
 */
function seacoastbank_preprocess_field(array &$variables, $hook) {
  /*switch ($variables['element']['#field_name']) {
  }*/
}

/**
 * Implements hook_preprocess_details().
 */
function seacoastbank_preprocess_details(array &$variables) {
  /*$variables['attributes']['class'][] = 'details';
  $variables['summary_attributes']['class'] = 'summary';*/
}

/**
 * Implements hook_theme_suggestions_details_alter().
 */
function seacoastbank_theme_suggestions_details_alter(array &$suggestions, array $variables) {

}

function seacoastbank_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
 if ($hook == 'form' & !empty($variables['element']['#id'])) { 
    
   if(strpos($variables['element']['#id'], 'user-login-form')!==false){
        $suggestions[] = 'form__' . str_replace('-', '_','user-login-form' );
     }
   elseif(strpos($variables['element']['#id'], 'user-register-form')!== false){
       $suggestions[] = 'form__' . str_replace('-', '_','user-register-form' );
   }
    elseif(strpos($variables['element']['#id'], 'user-pass')!== false){
       $suggestions[] = 'form__' . str_replace('-', '_','user-pass' );
   }
    elseif(strpos($variables['element']['#id'], 'webform-submission-report-a-bug-add-form')!== false){
//       $suggestions[] = 'form__' . str_replace('-', '_','user-pass' );
        echo "Hereee";
   }
   else{
     $suggestions[] = 'form__' . str_replace('-', '_', $variables['element']['#id']);
   }
  }
}

/**
 * Implements hook_form_alter().
 */
function seacoastbank_form_alter(&$form, FormStateInterface $form_state, $form_id) {
 //Adding custom validation for the welcome page type field.
    if ($form_id == 'user_login_form') {
        $form['#prefix'] = '<div id="modal_example_form">';
        $form['#suffix'] = '</div>';
        // The status messages that will contain any form errors.
        $form['status_messages'] = [
            '#type' => 'status_messages',
            '#weight' => -10,
        ];
        $form['actions']['submit'] = [
            '#type' => 'submit',
            '#value' => 'Login',
            '#attributes' => [
                'class' => [
                    'use-ajax',
                ],
             ],
            // Function to call when the users click on submit button.
            '#ajax' => [
                'callback' => 'submitModalFormAjax',
                'event' => 'click',
            ],
        ];
        $form['#validate'][] = 'open_banking_portal_custom_validation';
        $form['name']['#attributes']['placeholder'] = t( 'Enter your User name or Email address' );
        $form['pass']['#attributes']['placeholder'] = t( '******' );
        $form['name']['#title'] = t('User name or email address');
        $form['persistent_login']['#prefix'] = '<span class="remember-me"></span>';
//        $form['#suffix'] = '';
    }
    elseif ($form_id == 'user_register_form') {
        $form['#prefix'] = '<div id="modal_example_form_register">';
        $form['#suffix'] = '</div>';
        // The status messages that will contain any form errors.
        $form['status_messages_register'] = [
            '#type' => 'status_messages',
            '#weight' => -10,
        ];
        $form['terms_condition'] = [
            '#type'  => 'checkbox',
            '#title' => t('I accept the Terms of Use and I have read the Privacy Policy.'),
            '#required' => TRUE,
            '#default_value' => TRUE,
            '#weight' => 10,
        ];
//        $form['actions']['submit'] = [
//            '#type' => 'submit',
//            '#value' => 'Create Account',
//            '#attributes' => [
//                'class' => [
//                    'use-ajax',
//                ],
//             ],
//            // Function to call when the users click on submit button.
//            '#ajax' => [
//                'callback' => 'submitModalFormAjax2',
//                'event' => 'click',
//            ],
//        ];
        
          $form['first_name']['#attributes']['placeholder'] = t( 'Enter your first name' ); 
          $form['last_name']['#attributes']['placeholder'] = t( 'Enter your last name' ); 
          $form['field_company_name']['#attributes']['placeholder'] = t( 'Enter your company name' ); 
        
    }
    elseif ($form_id == 'user_pass') {
        $form['#prefix'] = '<div id="modal_example_user_pass">';
        $form['#suffix'] = '</div>';
        // The status messages that will contain any form errors.
        $form['status_messages_register'] = [
            '#type' => 'status_messages',
            '#weight' => -10,
        ];
        $form['actions']['submit'] = [
            '#type' => 'submit',
            '#value' => 'Submit',
            '#attributes' => [
                'class' => [
                    'use-ajax',
                ],
             ],
            // Function to call when the users click on submit button.
            '#ajax' => [
                'callback' => 'submitModalFormAjaxpass',
                'event' => 'click',
            ],
        ];
    }
     elseif ($form_id == 'webform-submission-get-in-touch') {
        $form['#prefix'] = '<div id="modal_example_get_in_touch">';
        $form['#suffix'] = '</div>';
        // The status messages that will contain any form errors.
        $form['status_messages_register'] = [
            '#type' => 'status_messages',
            '#weight' => -10,
        ];
        $form['actions']['submit'] = [
            '#type' => 'submit',
            '#value' => 'Submit',
            '#attributes' => [
                'class' => [
                    'use-ajax',
                ],
             ],
            // Function to call when the users click on submit button.
            '#ajax' => [
                'callback' => 'submitModalFormAjaxgetintouch',
                'event' => 'click',
            ],
        ];
    }
    if(strpos('developer_app_edit_for_developer_form',$form_id) !== false) {
        $developerApp = \Drupal::service('request_stack')->getCurrentRequest()->get('app')->label();
        $form['#prefix'] = '<div id="modal_app_edit_form"><h2 class="edit-add-form"><strong> Edit '. $developerApp .'</strong></h2>';
        $form['#suffix'] = '</div>';
        $form['status_messages_register'] = [
            '#type' => 'status_messages',
            '#weight' => -10,
        ];
        $form['api_products']['#title'] = 'Products';
        $form['actions']['submit'] = [
            '#type' => 'submit',
            '#value' => 'Save',
            '#attributes' => [
                'class' => [
                    'use-ajax',
                ],
             ],
            // Function to call when the users click on submit button.
            '#ajax' => [
                'callback' => 'submitModalFormAjaxDeveloperAppEditSave',
                'event' => 'click',
            ],
        ];
    }
    if(strpos('developer_app_add_for_developer_form',$form_id) !== false) {
        $form['#prefix'] = '<div id="modal_app_create_form"><h2 class="create-add-form"><strong> Add app</strong></h2>';
        $form['#suffix'] = '</div>';
        $form['status_messages_register'] = [
            '#type' => 'status_messages',
            '#weight' => -10,
        ];
        $form['api_products']['#title'] = 'Products';
        $form['displayname_wrapper']['#attributes']['placeholder'] = t('Enter your application name');
        $form['actions']['submit'] = [
            '#type' => 'submit',
            '#value' => 'Create App',
            '#attributes' => [
                'class' => [
                    'use-ajax',
                ],
             ],
            // Function to call when the users click on submit button.
            '#ajax' => [
                'callback' => 'submitModalFormAjaxDeveloperAppSave',
                'event' => 'click',
            ],
        ];
    }
    if(strpos('developer_app_delete_for_developer_form',$form_id) !== false) {
        $internalName = \Drupal::service('request_stack')->getCurrentRequest()->get('app')->label();
        $form['#prefix'] = '<div id="modal_delete_app">';
        $form['#suffix'] = '</div>';
        $form['status_messages_register'] = [
            '#type' => 'status_messages',
            '#weight' => -10,
        ];
        $form['description'] = [
            '#prefix' => '<h2><strong>',
            '#markup' => t('Delete %developer_app',['%developer_app' => $internalName]),
            '#suffix' => '</strong></h2>',
            '#weight' => -2
        ];
        
        $form['delete_action'] = [
            '#prefix' => '<p>',
            '#markup' => t("Deleting the 'delta-digitalapi' App will also delete all of its data."),
            '#suffix' => '</p>',
            "#weight" => -1
        ];
        $form['confim_action'] = [
            '#prefix' => '<p>',
            '#markup' => t("This action cannot be undone."),
            '#suffix' => '</p>',
            "weight" => 0
        ];
        $form['id_verification'] = [
            '#prefix' => '<div class="developer-app-name"><span>',
            '#markup' => t("%developer_app",['%developer_app' => $internalName]),
            '#weight' => 1,
            '#default_value' => $internalName,
            '#suffix' => '</span></div><hr/>',
            '#required' => FALSE
        ];
        $form['actions']['submit'] = [
            '#type' => 'submit',
            '#value' => 'Delete',
            '#attributes' => [
                'class' => [
                    'use-ajax',
                ],
             ],
            // Function to call when the users click on submit button.
            '#ajax' => [
                'callback' => 'submitModalFormAjaxDeveloperAppDelete',
                'event' => 'click',
            ],
        ];
    }
    if(strpos('apigee_edge_developer_app_analytics',$form_id) !== false) {
        $form['controls']['label_container']['label'] = [
            '#markup' => t('Display:'),
        ];
        $form['controls']['submit']['#value'] = Submit;
        $form['controls']['submit']['#attributes']['class'] = ['sign-up-button'];
    }
}
function seacoastbank_custom_validation($form,$form_state){
   $errors = $form_state->getErrors();
    if (!empty($errors['name'])) {
      $string_error = $errors['name']->__tostring();
      if (strpos($string_error, 'Unrecognized username or password') !== FALSE) {
        $name_value = $form_state->getValue('name');
        $form_state->clearErrors();
        $form_state->setErrorByName('name', t('<a class="use-ajax" data-dialog-type="modal" href="user/password?name">Forgot your password?</a>'
        ));
      }
    }
}

/**
 * AJAX callback handler that displays any errors or a success message.
 */
function submitModalFormAjax(array $form, FormStateInterface $form_state) {
  $response = new AjaxResponse();
  // If there are any form errors, re-display the form.
  if ($form_state->hasAnyErrors()) {
    // Remember the previous id ? Here it is
    $response->addCommand(new ReplaceCommand('#modal_example_form', $form));
  }
  else {
   //$response->addCommand(new OpenModalDialogCommand("Success!", 'The modal form has been submitted.', ['width' => 800]));
    $url = Url::fromRoute('<front>');
    $command = new RedirectCommand($url->toString());
    $response->addCommand($command);

  }

  return $response;
}
function submitModalFormAjax2(array $form, FormStateInterface $form_state) {
  $response = new AjaxResponse();
  // If there are any form errors, re-display the form.
  if ($form_state->hasAnyErrors()) {
    //$response->addCommand(new OpenModalDialogCommand("Success!", 'The modal form has been submitted.', ['width' => 800]));  
    // Remember the previous id ? Here it is
   $response->addCommand(new ReplaceCommand('#modal_example_form_register', $form));
  }
  else {
   // $response->addCommand(new OpenModalDialogCommand("Success!", 'The modal form has been submitted.', ['width' => 800]));
    $url = Url::fromRoute('<front>');
    $command = new RedirectCommand($url->toString());
    $response->addCommand($command);

  }

  return $response;
}
function submitModalFormAjaxpass(array $form, FormStateInterface $form_state) {
  $response = new AjaxResponse();
  // If there are any form errors, re-display the form.
  if ($form_state->hasAnyErrors()) {
    //$response->addCommand(new OpenModalDialogCommand("Success!", 'The modal form has been submitted.', ['width' => 800]));  
    // Remember the previous id ? Here it is
   $response->addCommand(new ReplaceCommand('#modal_example_user_pass', $form));
  }
  else {
   $response->addCommand(new OpenModalDialogCommand("Success!", 'Further instructions are sent to your email id', ['width' => 800]));
//    $url = Url::fromRoute('<front>');
//    $command = new RedirectCommand($url->toString());
//    $response->addCommand($command);

  }

  return $response;
}

function submitModalFormAjaxgetintouch(array $form, FormStateInterface $form_state) {
  $response = new AjaxResponse();
  // If there are any form errors, re-display the form.
  if ($form_state->hasAnyErrors()) {
     
    // Remember the previous id ? Here it is
    $response->addCommand(new ReplaceCommand('#modal_example_get_in_touch', $form));
  }
  else {
   //$response->addCommand(new OpenModalDialogCommand("Success!", 'The modal form has been submitted.', ['width' => 800]));
    $url = Url::fromRoute('<front>');
    $command = new RedirectCommand($url->toString());
    $response->addCommand($command);

  }

 return $response;
}

function submitModalFormAjaxDeveloperAppEditSave(array $form, FormStateInterface $form_state) {
  $response = new AjaxResponse();
  // If there are any form errors, re-display the form.
  if ($form_state->hasAnyErrors()) {
     
    // Remember the previous id ? Here it is
    $response->addCommand(new ReplaceCommand('#modal_app_edit_form', $form));
  }
  else {
   //$response->addCommand(new OpenModalDialogCommand("Success!", 'The modal form has been submitted.', ['width' => 800]));
    $userId = \Drupal::currentUser()->id();
    $user = User::load($userId);
    $developerId = $user->get('apigee_edge_developer_id')->value;
    $internalName = \Drupal::service('request_stack')->getCurrentRequest()->get('app')->getName();
    $entityId = \Drupal::entityQuery('developer_app')->condition('name', $internalName)->condition('developerId',$developerId)->execute();
    $entity = \Drupal::entityTypeManager()->getStorage('developer_app')->load($entityId[0]);
    $entity->set('displayName',$form_state->getValue('displayName')[0]['value']);
    $entity->set('description',$form_state->getValue('description')[0]['value']);
    $entity->set('callbackUrl',$form_state->getValue('callbackUrl')[0]['value']);
    $config = \Drupal::configFactory()->get('apigee_edge.common_app_settings');
    if ($config->get('user_select')) {
      $dacc = new DeveloperAppCredentialController(\Drupal::service('apigee_edge.sdk_connector')->getOrganization(), $entity->getDeveloperId(), $entity->getName(), \Drupal::service('apigee_edge.sdk_connector')->getClient());

      // $this->entity->getCredentials() always returns the already stored
      // credentials on Apigee Edge.
      // @see \Drupal\apigee_edge\Entity\DeveloperApp::getCredentials()
      foreach ($form_state->getValue('credential', []) as $new_credential => $new_credentail_data) {
        foreach ($entity->getCredentials() as $original_credential) {
          if ($new_credential === $original_credential->getConsumerKey()) {
            try {
              $original_api_product_names = [];
              // Cast it to array to be able handle the same way the single- and
              // multi-select configuration.
              $new_api_product_names = array_filter((array) $new_credentail_data['api_products']);
              foreach ($original_credential->getApiProducts() as $original_api_product) {
                $original_api_product_names[] = $original_api_product->getApiproduct();
              }

              $product_list_changed = FALSE;
              if (array_diff($original_api_product_names, $new_api_product_names)) {
                foreach (array_diff($original_api_product_names, $new_api_product_names) as $api_product_to_remove) {
                  $dacc->deleteApiProduct($new_credential, $api_product_to_remove);
                }
                $product_list_changed = TRUE;
              }
              if (array_diff($new_api_product_names, $original_api_product_names)) {
                $dacc->addProducts($new_credential, array_values(array_diff($new_api_product_names, $original_api_product_names)));
                $product_list_changed = TRUE;
              }

//              if ($product_list_changed) {
//                $this->messenger->addStatus($this->t("Credential's product list has been successfully updated."));
//              }
              break;

            }
            catch (\Exception $exception) {
              $this->messenger->addError(t("Could not update credential's product list.",
                ['@consumer_key' => $new_credential]));
              watchdog_exception('apigee_edge', $exception);
              $redirect_user = FALSE;
            }
          }
        }
      }
    }    
    $entity->save();
    drupal_flush_all_caches();
    drupal_set_message($entity->label(). " has been successfully updated");
    $url = Url::fromRoute('test_restapi.my_developer_apps_list_controller_getListMyApps');
    $command = new RedirectCommand($url->toString());
    $response->addCommand(new CloseModalDialogCommand());
    $response->addCommand($command);

  }

 return $response;
}

function submitModalFormAjaxDeveloperAppSave(array $form, FormStateInterface $form_state) {
  $response = new AjaxResponse();
  // If there are any form errors, re-display the form.
  if ($form_state->hasAnyErrors()) {
     
    // Remember the previous id ? Here it is
    $response->addCommand(new ReplaceCommand('#modal_app_create_form', $form));
  }
  else {
   //$response->addCommand(new OpenModalDialogCommand("Success!", 'The modal form has been submitted.', ['width' => 800]));
    $userId = \Drupal::currentUser()->id();
    $entity = \Drupal::entityTypeManager()->getStorage('developer_app')->create();
    $entity->setOwnerId($userId);
    $entity->set('displayName',$form_state->getValue('displayName')[0]['value']);
    $entity->set('name',$form_state->getValue('name'));
    $entity->set('description',$form_state->getValue('description')[0]['value']);
    $entity->set('callbackUrl',$form_state->getValue('callbackUrl')[0]['value']);    
    $entity->save();
    $config = \Drupal::configFactory()->get('apigee_edge.common_app_settings');
    $products = array_values(array_filter((array) $form_state->getValue('api_products')));
    $dacc = new DeveloperAppCredentialController(\Drupal::service('apigee_edge.sdk_connector')->getOrganization(), $entity->getDeveloperId(), $entity->getName(), \Drupal::service('apigee_edge.sdk_connector')->getClient());
    /** @var \Apigee\Edge\Api\Management\Entity\AppCredential[] $credentials */
    $credentials = $entity->getCredentials();
    /** @var \Apigee\Edge\Api\Management\Entity\AppCredential $credential */
    $credential = reset($credentials);
    $credential_lifetime = \Drupal::configFactory()->get('apigee_edge.developer_app_settings')->get('credential_lifetime');
    if ($credential_lifetime === 0) {
        $dacc->addProducts($credential->id(), $products);
    } else {
        $dacc->delete($credential->id());
        // The value of -1 indicates no set expiry. But the value of 0 is not
        // acceptable by the server (InvalidValueForExpiresIn).
        $dacc->generate($products, $entity->getAttributes(), $entity->getCallbackUrl(), [], $credential_lifetime * 86400000);
    }
    drupal_flush_all_caches();
    drupal_set_message($entity->label(). " has been successfully created");
    $url = Url::fromRoute('test_restapi.my_developer_apps_list_controller_getListMyApps');
    $command = new RedirectCommand($url->toString());
    $response->addCommand(new CloseModalDialogCommand());
    $response->addCommand($command);

  }

 return $response;
}

function submitModalFormAjaxDeveloperAppDelete(array $form, FormStateInterface $form_state) {
  $response = new AjaxResponse();
  // If there are any form errors, re-display the form.
  if ($form_state->hasAnyErrors()) {
     
    // Remember the previous id ? Here it is
    $response->addCommand(new ReplaceCommand('#modal_delete_app', $form));
  }
  else {
   //$response->addCommand(new OpenModalDialogCommand("Success!", 'The modal form has been submitted.', ['width' => 800]));
    //$userId = \Drupal::currentUser()->id();
    //$entity = \Drupal::service('request_stack')->getCurrentRequest()->get('app');
    //$entity->delete();
    drupal_flush_all_caches();
    $url = Url::fromRoute('test_restapi.my_developer_apps_list_controller_getListMyApps');
    $command = new RedirectCommand($url->toString());
    $response->addCommand(new CloseModalDialogCommand());
    $response->addCommand($command);

  }

 return $response;
}

/**
 * Implements hook_preprocess_menu_local_task().
 */
function oseacoastbank_preprocess_menu_local_task(array &$variables) {
  //$variables['element']['#link']['url']->setOption('attributes', ['class'=>'rounded']);
}
//function open_banking_portal_form_element($vars) {
//  $original = open_banking_portal_form_element($vars);
//  return '<div class="something">' . $original . '</div>';
//}
/**
 * Implements hook_theme_suggestions_HOOK_alter for blocks.
 */
function seacoastbank_theme_suggestions_block_alter(&$suggestions, $variables) {
    if (isset($variables['elements']['content']['#block_content'])) {
        array_splice($suggestions, 1, 0, 'block__type__' . $variables['elements']['content']['#block_content']->bundle());
    }
    return $suggestions; 
  
}